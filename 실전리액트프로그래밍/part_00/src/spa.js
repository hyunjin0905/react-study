// 싱글페이지 어플리케이션
// 예전 웹서비스 방식은 새로운 페이지를 요청할때마다 정적 리소스를 다운받고 전체페이지가 다시 렌더링 되는 방식을 사용
// 변경이 불필요 한 부분도 새로고침이 되어서 비효율적임

// spa
// 최초 페이지 요청시 서버에서 첫 페이지를 처리하고 이후의 라우팅은 클라이언트에서 처리하는 웹 애플리케이션

// 서버에 요청하지않고도 페이지전환할때마다 클라이언트에서 처리할수있다


// spa 구현 하기위해
// 브라우저 히스토리 api 쓰면 됩니다.


// spa 구현 조건
// 자바스크립트로 브라우저 히스토리 api 사용해서 서버에 요청 하지 않고도
// 브라우저 페이지를 전환 요청을 보낼수있어야한다


// 브라우저에는  히스토리에 state를 저장 하는 스택이 존재 합니다

// pushState : 브라우저의 세션 기록 스택에 항목을 추가합니다.
// popState : 이전상태를 복원
// replaceState: pushState 와 비슷하지만 스택에 state를 쌓지 않고 가장 최신의 state를 대체 합니다


// react-router-dom
// 일반적인 웹에서 a태그를 이용해 다른 페이지로 이동했었다면,
// 리액트에서는 React-Router 를 통해 Link 태그를 사용하여 화면을 전환한다.
// 리액트는 변화가 있는 컴포넌트만 업데이트하여 효율적으로 성능을 관리하는 구조로
// 페이지 이동 시 굳이 화면 전체를 새로고침 할 필요가 없기 때문입니다.



// browerRouter 란
// HTML5의 History API를 사용하여 페이지를 새로고침하지 않고도 주소를 변경할 수 있도록 해준다.(즉, 페이지 변경으로 인한 깜빡거림이 없다.)
// 1. Link 컴포넌트를 to 속성에 이동할 경로를 작성한다.
//
// 2. Route 컴포넌트 path속성을 Link의 to 속성과 매핑 component에 컴포넌트 경로 작성
//
// 3. 새로고침을 하면 경로를 찾지 못하여 에러가 발생한다. ( 주소를 사용하여 페이지를 찾아가도 에러 발생 )
//
// -> 이를 해결하기 위해서는 서버에 추가적인 세팅이 필요하다.
//
// -> 페이지의 유무를 서버에 알려줘야 하며, 서버 세팅 시 검색엔진에 신경써야한다.
//
// 4. 대부분 레거시 브라우저 (IE9 이하)에서는 사용 할 수 없다.
//
// 5. History API를 사용해야 한다.
//
// 6. 동적인 페이지에 적합하다.